{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","id","getCellProps","href","original","name","target","rel","work","Promise","resolve","reject","file","files","reader","FileReader","readAsText","onload","res","csv","lines","split","result","length","obj","currentline","j","push","parseData","filter","item","qty","parseInt","supplier","barcode","sort","itemA","itemB","onerror","App","React","useMemo","Header","accessor","useState","setData","className","type","onChange","a","async","currentTarget","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a8bf1ac.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data\n        },\n        useSortBy\n    );\n\n    // Render the UI for your table\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.render('Header')}\n                                {/* Add a sort direction indicator */}\n                                <span>{column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}</span>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map((cell, i) => {\n                                if (cell.column.id === 'actions') {\n                                    return (\n                                        <td {...cell.getCellProps()}>\n                                            <a\n                                                href={`https://r.loyverse.com/dashboard/#/goods/itemhistory?page=0&limit=100&periodName=month&periodLength=1m&arg=-1&from=1578290400000&to=1578895140000&wareId=27706807&wareName=${cell.row.original.name}&outletsIds=814446&merchantsIds=all&reasons=all`}\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                            >\n                                                Historia\n                                            </a>\n                                        </td>\n                                    );\n                                }\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","import React, { useState } from 'react';\nimport Table from './components/Table';\n\nimport './App.css';\n\nfunction parseData(csv) {\n    var lines = csv.split('\\n');\n\n    var result = [];\n    var headers = lines[0].split(',');\n\n    for (var i = 1; i < lines.length; i++) {\n        var obj = {};\n        var currentline = lines[i].split(',');\n\n        for (var j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentline[j];\n        }\n\n        result.push(obj);\n    }\n\n    return result; //JavaScript object\n}\n\nfunction work(target) {\n    return new Promise((resolve, reject) => {\n        const file = target.files[0];\n\n        var reader = new FileReader();\n        reader.readAsText(file, 'UTF-8');\n        reader.onload = ({ target }) => {\n            const data = parseData(target.result);\n            const res = data\n                .filter(item => {\n                    return item['Disponibles para la venta [Smile]'] === 'Y';\n                })\n                .map(item => {\n                    return {\n                        name: item['Nombre'],\n                        qty: parseInt(item['En inventario [Smile]']),\n                        supplier: item['Proveedor'],\n                        barcode: item['Codigo de barras']\n                    };\n                })\n                .sort(function(itemA, itemB) {\n                    return itemA.qty - itemB.qty;\n                });\n            return resolve(res);\n        };\n        reader.onerror = () => {\n            reject('Error');\n        };\n    });\n}\nfunction App() {\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Codigo de barras',\n                accessor: 'barcode'\n            },\n            {\n                Header: 'Nombre',\n                accessor: 'name'\n            },\n            {\n                Header: 'Cantidad',\n                accessor: 'qty'\n            },\n            {\n                Header: 'Proveedor',\n                accessor: 'supplier'\n            },\n            {\n                Header: 'Acciones',\n                accessor: 'actions'\n            }\n        ],\n        []\n    );\n\n    const [data, setData] = useState([]);\n    return (\n        <div className=\"App\">\n            <h1>Productos con inventario bajo</h1>\n            <input\n                type=\"file\"\n                onChange={async ({ currentTarget }) => {\n                    const data = await work(currentTarget);\n                    setData(data);\n                }}\n            />\n            <hr />\n            {data.length ? <Table columns={columns} data={data} /> : null}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}